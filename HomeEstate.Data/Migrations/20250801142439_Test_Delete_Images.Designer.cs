// <auto-generated />
using System;
using HomeEstate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeEstate.Data.Migrations
{
    [DbContext(typeof(HomeEstateDbContext))]
    [Migration("20250801142439_Test_Delete_Images")]
    partial class Test_Delete_Images
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeEstate.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddbb3fc6-8e89-45a6-b356-9e3332fc3c4a",
                            Email = "nqkuv@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14214ee6-24de-4b9e-8472-3a42fb73ecfb",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("HomeEstate.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "House"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Villa"
                        });
                });

            modelBuilder.Entity("HomeEstate.Models.FavoriteProperty", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PropertyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProperties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            UserId = "3da54138-8954-47bf-9d6f-e4d4643bd2da"
                        },
                        new
                        {
                            PropertyId = 2,
                            UserId = "3da54138-8954-47bf-9d6f-e4d4643bd2da"
                        },
                        new
                        {
                            PropertyId = 3,
                            UserId = "3da54138-8954-47bf-9d6f-e4d4643bd2da"
                        });
                });

            modelBuilder.Entity("HomeEstate.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Location ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(163)
                        .HasColumnType("nvarchar(163)")
                        .HasComment("Location CityName");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Vitosha Blvd",
                            City = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Address = "45 Kapana Street",
                            City = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            Address = "10 Sea Garden Ave",
                            City = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            Address = "78 Central Square",
                            City = "Burgas"
                        },
                        new
                        {
                            Id = 5,
                            Address = "",
                            City = "Vidin"
                        },
                        new
                        {
                            Id = 6,
                            Address = "",
                            City = "Vratsa"
                        },
                        new
                        {
                            Id = 7,
                            Address = "",
                            City = "Gabrovo"
                        },
                        new
                        {
                            Id = 8,
                            Address = "",
                            City = "Kardzhali"
                        },
                        new
                        {
                            Id = 9,
                            Address = "",
                            City = "Kyustendil"
                        },
                        new
                        {
                            Id = 10,
                            Address = "",
                            City = "Lovech"
                        },
                        new
                        {
                            Id = 11,
                            Address = "",
                            City = "Montana"
                        },
                        new
                        {
                            Id = 12,
                            Address = "",
                            City = "Pazardzhik"
                        },
                        new
                        {
                            Id = 13,
                            Address = "",
                            City = "Pernik"
                        },
                        new
                        {
                            Id = 14,
                            Address = "",
                            City = "Pleven"
                        },
                        new
                        {
                            Id = 15,
                            Address = "",
                            City = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = 16,
                            Address = "",
                            City = "Razgrad"
                        },
                        new
                        {
                            Id = 17,
                            Address = "",
                            City = "Ruse"
                        },
                        new
                        {
                            Id = 18,
                            Address = "",
                            City = "Silistra"
                        },
                        new
                        {
                            Id = 19,
                            Address = "",
                            City = "Sliven"
                        },
                        new
                        {
                            Id = 20,
                            Address = "",
                            City = "Smolyan"
                        },
                        new
                        {
                            Id = 21,
                            Address = "",
                            City = "Blagoevgrad"
                        },
                        new
                        {
                            Id = 22,
                            Address = "",
                            City = "Stara Zagora"
                        },
                        new
                        {
                            Id = 23,
                            Address = "",
                            City = "Targovishte"
                        },
                        new
                        {
                            Id = 24,
                            Address = "",
                            City = "Haskovo"
                        },
                        new
                        {
                            Id = 25,
                            Address = "",
                            City = "Shumen"
                        },
                        new
                        {
                            Id = 26,
                            Address = "",
                            City = "Yambol"
                        },
                        new
                        {
                            Id = 27,
                            Address = "",
                            City = "Dobrich"
                        });
                });

            modelBuilder.Entity("HomeEstate.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Property identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("int")
                        .HasComment("Property Area");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("datetime2")
                        .HasComment("Available from date");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Property CreadetOn");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Property Description");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if property is deleted");

                    b.Property<bool?>("IsFurnished")
                        .HasColumnType("bit")
                        .HasComment("Indicates if property is furnished");

                    b.Property<bool?>("IsParking")
                        .HasColumnType("bit");

                    b.Property<int>("ListingType")
                        .HasColumnType("int")
                        .HasComment("Property Listing Type - Sale, Rent or Both");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumLeasePeriod")
                        .HasColumnType("int")
                        .HasComment("Minimum lease period in months");

                    b.Property<decimal?>("MonthlyRent")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Monthly rent if property is for rent");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Property Owner");

                    b.Property<bool?>("PetsAllowed")
                        .HasColumnType("bit")
                        .HasComment("Indicates if pets are allowed for rentals");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Property Price");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<decimal?>("SecurityDeposit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Security deposit for rental properties");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Property Tittle");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 120,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 8, 1, 14, 24, 39, 84, DateTimeKind.Utc).AddTicks(6785),
                            Description = "Modern apartment located in the city center with great amenities.",
                            FavoriteCount = 0,
                            IsDeleted = false,
                            ListingType = 1,
                            LocationId = 1,
                            OwnerId = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            Price = 250000m,
                            PropertyType = 0,
                            Title = "Luxury Apartment in Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Area = 200,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beautiful countryside house with a big garden.",
                            FavoriteCount = 0,
                            IsDeleted = false,
                            ListingType = 1,
                            LocationId = 2,
                            OwnerId = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            Price = 180000m,
                            PropertyType = 0,
                            Title = "Cozy House in the Countryside"
                        },
                        new
                        {
                            Id = 3,
                            Area = 180,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 8, 1, 14, 24, 39, 84, DateTimeKind.Utc).AddTicks(6796),
                            Description = "Prime commercial location with modern infrastructure and ample parking.",
                            FavoriteCount = 0,
                            IsDeleted = false,
                            ListingType = 1,
                            LocationId = 3,
                            OwnerId = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            Price = 16000m,
                            PropertyType = 0,
                            Title = "Commercial Office Space"
                        },
                        new
                        {
                            Id = 4,
                            Area = 800,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 11, 1, 17, 24, 39, 84, DateTimeKind.Local).AddTicks(6804),
                            Description = "High-end condo with premium amenities, pool access, and concierge services.",
                            FavoriteCount = 0,
                            IsDeleted = false,
                            ListingType = 1,
                            LocationId = 1,
                            OwnerId = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            Price = 27500000m,
                            PropertyType = 0,
                            Title = "Luxury Apartment with Pool"
                        },
                        new
                        {
                            Id = 5,
                            Area = 2500,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 5, 1, 17, 24, 39, 84, DateTimeKind.Local).AddTicks(6870),
                            Description = "Perfect family home with large backyard, garage, and excellent school district.",
                            FavoriteCount = 0,
                            IsDeleted = false,
                            ListingType = 1,
                            LocationId = 4,
                            OwnerId = "3da54138-8954-47bf-9d6f-e4d4643bd2da",
                            Price = 450000.00m,
                            PropertyType = 0,
                            Title = "Spacious Family House"
                        });
                });

            modelBuilder.Entity("HomeEstate.Models.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("PropertyImage Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("PropertyImage ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://images.unsplash.com/photo-1518780664697-55e3ad937233?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://images.unsplash.com/photo-1505693314120-0d443867891c?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://images.unsplash.com/photo-1552321554-5fefe8c9ef14?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=800&h=600&fit=crop",
                            IsDeleted = false,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://img.vila.bg/g/6556/170637.jpg",
                            IsDeleted = false,
                            PropertyId = 4
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://api.photon.aremedia.net.au/wp-content/uploads/sites/2/umb-media/25922/resort-style-1980s-home-renovation-living-room-vaulted-a-frame-ceiling.jpg?crop=0px%2C1001px%2C1467px%2C825px&resize=720%2C405",
                            IsDeleted = false,
                            PropertyId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HomeEstate.Models.FavoriteProperty", b =>
                {
                    b.HasOne("HomeEstate.Models.Property", "Property")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEstate.Models.ApplicationUser", "User")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeEstate.Models.Property", b =>
                {
                    b.HasOne("HomeEstate.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeEstate.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeEstate.Models.ApplicationUser", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HomeEstate.Models.PropertyImage", b =>
                {
                    b.HasOne("HomeEstate.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeEstate.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteProperties");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("HomeEstate.Models.Property", b =>
                {
                    b.Navigation("FavoriteProperties");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
