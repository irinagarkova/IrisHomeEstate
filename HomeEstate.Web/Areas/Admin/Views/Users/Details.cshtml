@using HomeEstate.Services.Core.Dtos
@model ApplicationUserWithRoleDto
@{
    ViewData["Title"] = "User Details";
}

<div class="user-details-admin">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">User Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Users" asp-action="Index">Users</a></li>
                    <li class="breadcrumb-item active">Details</li>
                </ol>
            </nav>
        </div>
        <div>
            <a asp-area="Admin" asp-controller="Users" asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    <!-- User Profile Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-left-primary">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-2 text-center">
                            <div class="user-avatar mb-3">
                                <div class="avatar-circle bg-primary text-white">
                                    @(Model.UserName?.Substring(0, 1).ToUpper() ?? "U")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <h3 class="mb-2">@Model.UserName</h3>
                            <p class="text-muted">@Model.Email</p>
                            <div class="d-flex flex-wrap gap-2 mb-2">
                                @if (Model.Roles != null && Model.Roles.Any())
                                {
                                    @foreach (var role in Model.Roles)
                                    {
                                        <span class="badge bg-@(role == "Admin" ? "danger" : "primary") fs-6">@role</span>
                                    }
                                }
                                else
                                {
                                    <span class="badge bg-secondary">No roles assigned</span>
                                }

                                @if (Model.LockoutEnd.HasValue && Model.LockoutEnd > DateTime.Now)
                                {
                                    <span class="badge bg-warning">Locked Out</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                            </div>
                        </div>
                        <div class="col-md-3 text-end">
                            <div class="btn-group" role="group">
                                <a asp-area="Admin" asp-controller="Users" asp-action="Edit" asp-route-id="@Model.Id"
                                   class="btn btn-warning btn-sm">
                                    <i class="fas fa-edit"></i> Edit User
                                </a>
                                <button type="button" class="btn btn-danger btn-sm" onclick="showDeleteModal('@Model.Id', '@Model.UserName')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="row">
        <!-- Left Column - User Information -->
        <div class="col-lg-8">
            <!-- Basic Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-user me-2"></i>Basic Information</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>User ID:</strong>
                                <span class="text-muted">@Model.Id</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Username:</strong>
                                <span>@Model.UserName</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Email:</strong>
                                <span>@Model.Email</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Phone Number:</strong>
                                <span>@(Model.PhoneNumber ?? "Not provided")</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Email Confirmed:</strong>
                                <span class="badge bg-@(Model.EmailConfirmed ? "success" : "warning")">
                                    @(Model.EmailConfirmed ? "Yes" : "No")
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Phone Confirmed:</strong>
                                <span class="badge bg-@(Model.PhoneNumberConfirmed ? "success" : "warning")">
                                    @(Model.PhoneNumberConfirmed ? "Yes" : "No")
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Security Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Security Information</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Two Factor Enabled:</strong>
                                <span class="badge bg-@(Model.TwoFactorEnabled ? "success" : "secondary")">
                                    @(Model.TwoFactorEnabled ? "Yes" : "No")
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Lockout Enabled:</strong>
                                <span class="badge bg-@(Model.LockoutEnabled ? "warning" : "success")">
                                    @(Model.LockoutEnabled ? "Yes" : "No")
                                </span>
                            </div>
                        </div>
                        @if (Model.LockoutEnd.HasValue)
                        {
                            <div class="col-md-6">
                                <div class="info-item">
                                    <strong>Lockout End:</strong>
                                    <span class="text-@(Model.LockoutEnd > DateTime.Now ? "danger" : "muted")">
                                        @Model.LockoutEnd.Value.ToString("MMM dd, yyyy HH:mm")
                                    </span>
                                </div>
                            </div>
                        }
                        <div class="col-md-6">
                            <div class="info-item">
                                <strong>Access Failed Count:</strong>
                                <span class="badge bg-@(Model.AccessFailedCount > 0 ? "warning" : "success")">
                                    @Model.AccessFailedCount
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Properties (if any) -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-home me-2"></i>User Properties</h5>
                </div>
                <div class="card-body">
                    <div id="userPropertiesSection">
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading user properties...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Actions & Statistics -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="mailto:@Model.Email" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-envelope"></i> Send Email
                        </a>
                        <button type="button" class="btn btn-outline-warning btn-sm" onclick="resetPassword('@Model.Id')">
                            <i class="fas fa-key"></i> Reset Password
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="toggleLockout('@Model.Id', @Model.LockoutEnabled.ToString().ToLower())">
                            <i class="fas fa-@(Model.LockoutEnabled ? "unlock" : "lock")"></i>
                            @(Model.LockoutEnabled ? "Unlock" : "Lock") User
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="viewUserActivity('@Model.Id')">
                            <i class="fas fa-history"></i> View Activity
                        </button>
                    </div>
                </div>
            </div>

            <!-- User Statistics -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="text-center" id="userStatsSection">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading statistics...</p>
                    </div>
                </div>
            </div>

            <!-- Role Management -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-users-cog me-2"></i>Role Management</h5>
                </div>
                <div class="card-body">
                    <div class="current-roles mb-3">
                        <h6>Current Roles:</h6>
                        @if (Model.Roles != null && Model.Roles.Any())
                        {
                            @foreach (var role in Model.Roles)
                            {
                                <span class="badge bg-@(role == "Admin" ? "danger" : "primary") me-1 mb-1">
                                    @role
                                    <button type="button" class="btn-close btn-close-white ms-1"
                                            onclick="removeRole('@Model.Id', '@role')" aria-label="Remove role"></button>
                                </span>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No roles assigned</p>
                        }
                    </div>

                    <div class="add-role">
                        <h6>Add Role:</h6>
                        <div class="input-group">
                            <select class="form-select form-select-sm" id="roleSelect">
                                <option value="">Select role...</option>
                                <option value="Admin">Admin</option>
                                <option value="User">User</option>
                            </select>
                            <button class="btn btn-outline-success btn-sm" type="button" onclick="addRole('@Model.Id')">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning!</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to delete this user?</p>
                <div id="deleteUserInfo"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete User</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadUserProperties();
            loadUserStatistics();
        });

        function loadUserProperties() {
            // This would make an AJAX call to get user properties
            setTimeout(() => {
                const propertiesHtml = `
                            <div class="row g-2">
                                <div class="col-12">
                                    <div class="small-property-card">
                                        <div class="d-flex align-items-center">
                                            <div class="property-thumb me-3">
                                                <i class="fas fa-home fa-2x text-muted"></i>
                                            </div>
                                            <div>
                                                <h6 class="mb-1">Sample Property</h6>
                                                <small class="text-muted">$250,000 • 3 bed • Sofia</small>
                                            </div>
                                            <div class="ms-auto">
                                                <span class="badge bg-success">Active</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="text-center mt-3">
                                <small class="text-muted">Showing recent properties</small>
                            </div>
                        `;

                document.getElementById('userPropertiesSection').innerHTML = propertiesHtml;
            }, 1000);
        }

        function loadUserStatistics() {
            setTimeout(() => {
                const statsHtml = `
                            <div class="row text-center">
                                <div class="col-6">
                                    <div class="stat-box">
                                        <div class="stat-number text-primary">5</div>
                                        <div class="stat-label">Properties</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stat-box">
                                        <div class="stat-number text-success">12</div>
                                        <div class="stat-label">Favorites</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stat-box">
                                        <div class="stat-number text-info">30</div>
                                        <div class="stat-label">Days Active</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stat-box">
                                        <div class="stat-number text-warning">8</div>
                                        <div class="stat-label">Views</div>
                                    </div>
                                </div>
                            </div>
                        `;

                document.getElementById('userStatsSection').innerHTML = statsHtml;
            }, 800);
        }

        function showDeleteModal(userId, userName) {
            document.getElementById('deleteUserInfo').innerHTML = `
                        <div class="p-3 bg-light rounded">
                            <strong>User:</strong> ${userName}<br>
                            <strong>ID:</strong> ${userId}
                        </div>
                    `;

            document.getElementById('confirmDeleteBtn').onclick = () => deleteUser(userId);
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        function deleteUser(userId) {
            fetch(`@Url.Action("DeleteAjax", "Users", new { area = "Admin" })`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(userId)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                        setTimeout(() => {
                            window.location.href = '@Url.Action("Index", "Users", new { area = "Admin" })';
                        }, 1500);
                    } else {
                        showToast(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error deleting user', 'danger');
                });
        }

        function addRole(userId) {
            const roleSelect = document.getElementById('roleSelect');
            const roleName = roleSelect.value;

            if (!roleName) {
                showToast('Please select a role', 'warning');
                return;
            }

            fetch(`@Url.Action("AddRole", "Users", new { area = "Admin" })`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `userId=${userId}&roleName=${roleName}&__RequestVerificationToken=${document.querySelector('input[name="__RequestVerificationToken"]').value}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error adding role', 'danger');
                });
        }

        function removeRole(userId, roleName) {
            if (!confirm(`Remove role "${roleName}" from this user?`)) return;

            fetch(`@Url.Action("RemoveRole", "Users", new { area = "Admin" })`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `userId=${userId}&roleName=${roleName}&__RequestVerificationToken=${document.querySelector('input[name="__RequestVerificationToken"]').value}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error removing role', 'danger');
                });
        }

        function resetPassword(userId) {
            if (!confirm('Reset password for this user?')) return;
            showToast('Password reset functionality would be implemented here', 'info');
        }

        function toggleLockout(userId, currentStatus) {
            const action = currentStatus ? 'unlock' : 'lock';
            if (!confirm(`${action.charAt(0).toUpperCase() + action.slice(1)} this user?`)) return;
            showToast(`User ${action} functionality would be implemented here`, 'info');
        }

        function viewUserActivity(userId) {
            showToast('User activity view would be implemented here', 'info');
        }

        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            toast.style.cssText = `
                        top: 20px;
                        right: 20px;
                        z-index: 9999;
                        min-width: 300px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    `;
            toast.innerHTML = `
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    const bsAlert = new bootstrap.Alert(toast);
                    bsAlert.close();
                }
            }, 5000);
        }
    </script>
    @Html.AntiForgeryToken()
}

<style>
    .user-details-admin .user-avatar {
        width: 80px;
        height: 80px;
    }

    .avatar-circle {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 2rem;
    }

    .info-item {
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }

        .info-item:last-child {
            border-bottom: none;
        }

    .stat-box {
        padding: 15px;
        border-radius: 8px;
        background: #f8f9fa;
        margin-bottom: 10px;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
    }

    .stat-label {
        font-size: 0.8rem;
        color: #6c757d;
        text-transform: uppercase;
    }

    .small-property-card {
        padding: 15px;
        border-radius: 8px;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
    }

    .property-thumb {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #fff;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }

    .border-left-primary {
        border-left: 4px solid #4e73df !important;
    }

    .current-roles .badge {
        position: relative;
        padding-right: 25px;
    }

    .current-roles .btn-close {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 0.6rem;
        opacity: 0.7;
    }

    .current-roles .badge:hover .btn-close {
        opacity: 1;
    }
</style>